!function(l,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],b):(l="undefined"!=typeof globalThis?globalThis:l||self).interp2=b(l.worker_threads)}(this,(function(l){"use strict";function b(l){return l&&"object"==typeof l&&"default"in l?l:{default:l}}var d=b(l);function Z(l){return Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(l){return typeof l}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l},Z(l)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function m(l){var b={exports:{}};return l(b,b.exports),b.exports}var X=m((function(l,b){l.exports=function(l){function b(l,b){(null==b||b>l.length)&&(b=l.length);for(var d=0,Z=new Array(b);d<b;d++)Z[d]=l[d];return Z}function d(l){return function(l){if(Array.isArray(l))return b(l)}(l)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(l)||function(l,d){if(l){if("string"==typeof l)return b(l,d);var Z=Object.prototype.toString.call(l).slice(8,-1);return"Object"===Z&&l.constructor&&(Z=l.constructor.name),"Map"===Z||"Set"===Z?Array.from(l):"Arguments"===Z||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Z)?b(l,d):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(l,b,d,Z,m,X,c){try{var G=l[X](c),i=G.value}catch(l){return void d(l)}G.done?b(i):Promise.resolve(i).then(Z,m)}function X(l){return X="function"==typeof Symbol&&"symbol"==Z(Symbol.iterator)?function(l){return Z(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":Z(l)},X(l)}function c(l){var b={exports:{}};return l(b,b.exports),b.exports}var G,i=c((function(l){var b=function(l){var b,d=Object.prototype,Z=d.hasOwnProperty,m="function"==typeof Symbol?Symbol:{},c=m.iterator||"@@iterator",G=m.asyncIterator||"@@asyncIterator",i=m.toStringTag||"@@toStringTag";function W(l,b,d){return Object.defineProperty(l,b,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[b]}try{W({},"")}catch(l){W=function(l,b,d){return l[b]=d}}function p(l,b,d,Z){var m=b&&b.prototype instanceof o?b:o,X=Object.create(m.prototype),c=new T(Z||[]);return X._invoke=function(l,b,d){var Z=s;return function(m,X){if(Z===K)throw new Error("Generator is already running");if(Z===y){if("throw"===m)throw X;return J()}for(d.method=m,d.arg=X;;){var c=d.delegate;if(c){var G=S(c,d);if(G){if(G===h)continue;return G}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(Z===s)throw Z=y,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);Z=K;var i=t(l,b,d);if("normal"===i.type){if(Z=d.done?y:u,i.arg===h)continue;return{value:i.arg,done:d.done}}"throw"===i.type&&(Z=y,d.method="throw",d.arg=i.arg)}}}(l,d,c),X}function t(l,b,d){try{return{type:"normal",arg:l.call(b,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=p;var s="suspendedStart",u="suspendedYield",K="executing",y="completed",h={};function o(){}function n(){}function I(){}var L={};W(L,c,(function(){return this}));var V=Object.getPrototypeOf,a=V&&V(V(g([])));a&&a!==d&&Z.call(a,c)&&(L=a);var x=I.prototype=o.prototype=Object.create(L);function Y(l){["next","throw","return"].forEach((function(b){W(l,b,(function(l){return this._invoke(b,l)}))}))}function C(l,b){function d(m,c,G,i){var W=t(l[m],l,c);if("throw"!==W.type){var p=W.arg,s=p.value;return s&&"object"===X(s)&&Z.call(s,"__await")?b.resolve(s.__await).then((function(l){d("next",l,G,i)}),(function(l){d("throw",l,G,i)})):b.resolve(s).then((function(l){p.value=l,G(p)}),(function(l){return d("throw",l,G,i)}))}i(W.arg)}var m;this._invoke=function(l,Z){function X(){return new b((function(b,m){d(l,Z,b,m)}))}return m=m?m.then(X,X):X()}}function S(l,d){var Z=l.iterator[d.method];if(Z===b){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=b,S(l,d),"throw"===d.method))return h;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var m=t(Z,l.iterator,d.arg);if("throw"===m.type)return d.method="throw",d.arg=m.arg,d.delegate=null,h;var X=m.arg;return X?X.done?(d[l.resultName]=X.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=b),d.delegate=null,h):X:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,h)}function H(l){var b={tryLoc:l[0]};1 in l&&(b.catchLoc=l[1]),2 in l&&(b.finallyLoc=l[2],b.afterLoc=l[3]),this.tryEntries.push(b)}function e(l){var b=l.completion||{};b.type="normal",delete b.arg,l.completion=b}function T(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(H,this),this.reset(!0)}function g(l){if(l){var d=l[c];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var m=-1,X=function d(){for(;++m<l.length;)if(Z.call(l,m))return d.value=l[m],d.done=!1,d;return d.value=b,d.done=!0,d};return X.next=X}}return{next:J}}function J(){return{value:b,done:!0}}return n.prototype=I,W(x,"constructor",I),W(I,"constructor",n),n.displayName=W(I,i,"GeneratorFunction"),l.isGeneratorFunction=function(l){var b="function"==typeof l&&l.constructor;return!!b&&(b===n||"GeneratorFunction"===(b.displayName||b.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,I):(l.__proto__=I,W(l,i,"GeneratorFunction")),l.prototype=Object.create(x),l},l.awrap=function(l){return{__await:l}},Y(C.prototype),W(C.prototype,G,(function(){return this})),l.AsyncIterator=C,l.async=function(b,d,Z,m,X){void 0===X&&(X=Promise);var c=new C(p(b,d,Z,m),X);return l.isGeneratorFunction(d)?c:c.next().then((function(l){return l.done?l.value:c.next()}))},Y(x),W(x,i,"Generator"),W(x,c,(function(){return this})),W(x,"toString",(function(){return"[object Generator]"})),l.keys=function(l){var b=[];for(var d in l)b.push(d);return b.reverse(),function d(){for(;b.length;){var Z=b.pop();if(Z in l)return d.value=Z,d.done=!1,d}return d.done=!0,d}},l.values=g,T.prototype={constructor:T,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=b,this.done=!1,this.delegate=null,this.method="next",this.arg=b,this.tryEntries.forEach(e),!l)for(var d in this)"t"===d.charAt(0)&&Z.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=b)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function m(Z,m){return G.type="throw",G.arg=l,d.next=Z,m&&(d.method="next",d.arg=b),!!m}for(var X=this.tryEntries.length-1;X>=0;--X){var c=this.tryEntries[X],G=c.completion;if("root"===c.tryLoc)return m("end");if(c.tryLoc<=this.prev){var i=Z.call(c,"catchLoc"),W=Z.call(c,"finallyLoc");if(i&&W){if(this.prev<c.catchLoc)return m(c.catchLoc,!0);if(this.prev<c.finallyLoc)return m(c.finallyLoc)}else if(i){if(this.prev<c.catchLoc)return m(c.catchLoc,!0)}else{if(!W)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return m(c.finallyLoc)}}}},abrupt:function(l,b){for(var d=this.tryEntries.length-1;d>=0;--d){var m=this.tryEntries[d];if(m.tryLoc<=this.prev&&Z.call(m,"finallyLoc")&&this.prev<m.finallyLoc){var X=m;break}}X&&("break"===l||"continue"===l)&&X.tryLoc<=b&&b<=X.finallyLoc&&(X=null);var c=X?X.completion:{};return c.type=l,c.arg=b,X?(this.method="next",this.next=X.finallyLoc,h):this.complete(c)},complete:function(l,b){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&b&&(this.next=b),h},finish:function(l){for(var b=this.tryEntries.length-1;b>=0;--b){var d=this.tryEntries[b];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),e(d),h}},catch:function(l){for(var b=this.tryEntries.length-1;b>=0;--b){var d=this.tryEntries[b];if(d.tryLoc===l){var Z=d.completion;if("throw"===Z.type){var m=Z.arg;e(d)}return m}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,Z){return this.delegate={iterator:g(l),resultName:d,nextLoc:Z},"next"===this.method&&(this.arg=b),h}},l}(l.exports);try{regeneratorRuntime=b}catch(l){"object"===("undefined"==typeof globalThis?"undefined":X(globalThis))?globalThis.regeneratorRuntime=b:Function("r","regeneratorRuntime = r")(b)}})),W=c((function(l){var b=Object.prototype.hasOwnProperty,d="~";function Z(){}function m(l,b,d){this.fn=l,this.context=b,this.once=d||!1}function X(l,b,Z,X,c){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var G=new m(Z,X||l,c),i=d?d+b:b;return l._events[i]?l._events[i].fn?l._events[i]=[l._events[i],G]:l._events[i].push(G):(l._events[i]=G,l._eventsCount++),l}function c(l,b){0==--l._eventsCount?l._events=new Z:delete l._events[b]}function G(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(d=!1)),G.prototype.eventNames=function(){var l,Z,m=[];if(0===this._eventsCount)return m;for(Z in l=this._events)b.call(l,Z)&&m.push(d?Z.slice(1):Z);return Object.getOwnPropertySymbols?m.concat(Object.getOwnPropertySymbols(l)):m},G.prototype.listeners=function(l){var b=d?d+l:l,Z=this._events[b];if(!Z)return[];if(Z.fn)return[Z.fn];for(var m=0,X=Z.length,c=new Array(X);m<X;m++)c[m]=Z[m].fn;return c},G.prototype.listenerCount=function(l){var b=d?d+l:l,Z=this._events[b];return Z?Z.fn?1:Z.length:0},G.prototype.emit=function(l,b,Z,m,X,c){var G=d?d+l:l;if(!this._events[G])return!1;var i,W,p=this._events[G],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(l,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,b),!0;case 3:return p.fn.call(p.context,b,Z),!0;case 4:return p.fn.call(p.context,b,Z,m),!0;case 5:return p.fn.call(p.context,b,Z,m,X),!0;case 6:return p.fn.call(p.context,b,Z,m,X,c),!0}for(W=1,i=new Array(t-1);W<t;W++)i[W-1]=arguments[W];p.fn.apply(p.context,i)}else{var s,u=p.length;for(W=0;W<u;W++)switch(p[W].once&&this.removeListener(l,p[W].fn,void 0,!0),t){case 1:p[W].fn.call(p[W].context);break;case 2:p[W].fn.call(p[W].context,b);break;case 3:p[W].fn.call(p[W].context,b,Z);break;case 4:p[W].fn.call(p[W].context,b,Z,m);break;default:if(!i)for(s=1,i=new Array(t-1);s<t;s++)i[s-1]=arguments[s];p[W].fn.apply(p[W].context,i)}}return!0},G.prototype.on=function(l,b,d){return X(this,l,b,d,!1)},G.prototype.once=function(l,b,d){return X(this,l,b,d,!0)},G.prototype.removeListener=function(l,b,Z,m){var X=d?d+l:l;if(!this._events[X])return this;if(!b)return c(this,X),this;var G=this._events[X];if(G.fn)G.fn!==b||m&&!G.once||Z&&G.context!==Z||c(this,X);else{for(var i=0,W=[],p=G.length;i<p;i++)(G[i].fn!==b||m&&!G[i].once||Z&&G[i].context!==Z)&&W.push(G[i]);W.length?this._events[X]=1===W.length?W[0]:W:c(this,X)}return this},G.prototype.removeAllListeners=function(l){var b;return l?(b=d?d+l:l,this._events[b]&&c(this,b)):(this._events=new Z,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=d,G.EventEmitter=G,l.exports=G}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function b(){return new W}function Z(){var l,b,d=new Promise((function(){l=arguments[0],b=arguments[1]}));return d.resolve=l,d.reject=b,d}function X(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,b=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=d.length,m=0;m<l;m++)b[m]=d[0|Math.random()*Z];return b.join("")}var c,p=(c="",Buffer.from(c,"base64").toString("utf8"));function t(){var d=b();function m(b){try{return new l.Worker(b,{eval:!0})}catch(l){s(l)}}var c=m(p);if(!c)return s("invalid worker"),null;function G(){c?(c.terminate(),c=void 0):s("worker has been terminated")}function i(){var l={mode:"init",type:"function",input:Array.prototype.slice.call(arguments)};c.postMessage(l)}function W(){var l=Z(),b=X(),m={mode:"call",id:b,fun:"main",input:Array.prototype.slice.call(arguments)};return c.postMessage(m),d.once(b,(function(b){"success"===b.state?l.resolve(b.msg):l.reject(b.msg)})),l}function t(l){var b=l,Z=b.mode;"emit"!==Z&&"return"!==Z||("emit"===Z&&d.emit(b.evName,b.msg),"return"===Z&&d.emit(b.id,b))}function s(l){d.emit("error",l)}return c.on("message",t),c.on("error",s),i(Array.prototype.slice.call(arguments)),d.main=W,d.main=W,d.terminate=G,d}G=function(){var l,b=(l=i.mark((function l(){var b,Z,m,X=arguments;return i.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return b=Array.prototype.slice.call(X),Z=t(),l.next=4,Z.main.apply(Z,d(b)).finally((function(){Z.terminate()}));case 4:return m=l.sent,l.abrupt("return",m);case 6:case"end":return l.stop()}}),l)})),function(){var b=this,d=arguments;return new Promise((function(Z,X){var c=l.apply(b,d);function G(l){m(c,Z,X,G,i,"next",l)}function i(l){m(c,Z,X,G,i,"throw",l)}G(void 0)}))});return function(){return b.apply(this,arguments)}}()}(),G}(d.default)})),c=m((function(l,b){l.exports=function(){function l(l,b){(null==b||b>l.length)&&(b=l.length);for(var d=0,Z=new Array(b);d<b;d++)Z[d]=l[d];return Z}function b(b){return function(b){if(Array.isArray(b))return l(b)}(b)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(b)||function(b,d){if(b){if("string"==typeof b)return l(b,d);var Z=Object.prototype.toString.call(b).slice(8,-1);return"Object"===Z&&b.constructor&&(Z=b.constructor.name),"Map"===Z||"Set"===Z?Array.from(b):"Arguments"===Z||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Z)?l(b,d):void 0}}(b)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(l,b,d,Z,m,X,c){try{var G=l[X](c),i=G.value}catch(l){return void d(l)}G.done?b(i):Promise.resolve(i).then(Z,m)}function m(l){return m="function"==typeof Symbol&&"symbol"==Z(Symbol.iterator)?function(l){return Z(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":Z(l)},m(l)}function X(l){var b={exports:{}};return l(b,b.exports),b.exports}var c,G,i=X((function(l){var b=function(l){var b,d=Object.prototype,Z=d.hasOwnProperty,X="function"==typeof Symbol?Symbol:{},c=X.iterator||"@@iterator",G=X.asyncIterator||"@@asyncIterator",i=X.toStringTag||"@@toStringTag";function W(l,b,d){return Object.defineProperty(l,b,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[b]}try{W({},"")}catch(l){W=function(l,b,d){return l[b]=d}}function p(l,b,d,Z){var m=b&&b.prototype instanceof o?b:o,X=Object.create(m.prototype),c=new T(Z||[]);return X._invoke=function(l,b,d){var Z=s;return function(m,X){if(Z===K)throw new Error("Generator is already running");if(Z===y){if("throw"===m)throw X;return J()}for(d.method=m,d.arg=X;;){var c=d.delegate;if(c){var G=S(c,d);if(G){if(G===h)continue;return G}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(Z===s)throw Z=y,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);Z=K;var i=t(l,b,d);if("normal"===i.type){if(Z=d.done?y:u,i.arg===h)continue;return{value:i.arg,done:d.done}}"throw"===i.type&&(Z=y,d.method="throw",d.arg=i.arg)}}}(l,d,c),X}function t(l,b,d){try{return{type:"normal",arg:l.call(b,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=p;var s="suspendedStart",u="suspendedYield",K="executing",y="completed",h={};function o(){}function n(){}function I(){}var L={};W(L,c,(function(){return this}));var V=Object.getPrototypeOf,a=V&&V(V(g([])));a&&a!==d&&Z.call(a,c)&&(L=a);var x=I.prototype=o.prototype=Object.create(L);function Y(l){["next","throw","return"].forEach((function(b){W(l,b,(function(l){return this._invoke(b,l)}))}))}function C(l,b){function d(X,c,G,i){var W=t(l[X],l,c);if("throw"!==W.type){var p=W.arg,s=p.value;return s&&"object"===m(s)&&Z.call(s,"__await")?b.resolve(s.__await).then((function(l){d("next",l,G,i)}),(function(l){d("throw",l,G,i)})):b.resolve(s).then((function(l){p.value=l,G(p)}),(function(l){return d("throw",l,G,i)}))}i(W.arg)}var X;this._invoke=function(l,Z){function m(){return new b((function(b,m){d(l,Z,b,m)}))}return X=X?X.then(m,m):m()}}function S(l,d){var Z=l.iterator[d.method];if(Z===b){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=b,S(l,d),"throw"===d.method))return h;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var m=t(Z,l.iterator,d.arg);if("throw"===m.type)return d.method="throw",d.arg=m.arg,d.delegate=null,h;var X=m.arg;return X?X.done?(d[l.resultName]=X.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=b),d.delegate=null,h):X:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,h)}function H(l){var b={tryLoc:l[0]};1 in l&&(b.catchLoc=l[1]),2 in l&&(b.finallyLoc=l[2],b.afterLoc=l[3]),this.tryEntries.push(b)}function e(l){var b=l.completion||{};b.type="normal",delete b.arg,l.completion=b}function T(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(H,this),this.reset(!0)}function g(l){if(l){var d=l[c];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var m=-1,X=function d(){for(;++m<l.length;)if(Z.call(l,m))return d.value=l[m],d.done=!1,d;return d.value=b,d.done=!0,d};return X.next=X}}return{next:J}}function J(){return{value:b,done:!0}}return n.prototype=I,W(x,"constructor",I),W(I,"constructor",n),n.displayName=W(I,i,"GeneratorFunction"),l.isGeneratorFunction=function(l){var b="function"==typeof l&&l.constructor;return!!b&&(b===n||"GeneratorFunction"===(b.displayName||b.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,I):(l.__proto__=I,W(l,i,"GeneratorFunction")),l.prototype=Object.create(x),l},l.awrap=function(l){return{__await:l}},Y(C.prototype),W(C.prototype,G,(function(){return this})),l.AsyncIterator=C,l.async=function(b,d,Z,m,X){void 0===X&&(X=Promise);var c=new C(p(b,d,Z,m),X);return l.isGeneratorFunction(d)?c:c.next().then((function(l){return l.done?l.value:c.next()}))},Y(x),W(x,i,"Generator"),W(x,c,(function(){return this})),W(x,"toString",(function(){return"[object Generator]"})),l.keys=function(l){var b=[];for(var d in l)b.push(d);return b.reverse(),function d(){for(;b.length;){var Z=b.pop();if(Z in l)return d.value=Z,d.done=!1,d}return d.done=!0,d}},l.values=g,T.prototype={constructor:T,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=b,this.done=!1,this.delegate=null,this.method="next",this.arg=b,this.tryEntries.forEach(e),!l)for(var d in this)"t"===d.charAt(0)&&Z.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=b)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function m(Z,m){return G.type="throw",G.arg=l,d.next=Z,m&&(d.method="next",d.arg=b),!!m}for(var X=this.tryEntries.length-1;X>=0;--X){var c=this.tryEntries[X],G=c.completion;if("root"===c.tryLoc)return m("end");if(c.tryLoc<=this.prev){var i=Z.call(c,"catchLoc"),W=Z.call(c,"finallyLoc");if(i&&W){if(this.prev<c.catchLoc)return m(c.catchLoc,!0);if(this.prev<c.finallyLoc)return m(c.finallyLoc)}else if(i){if(this.prev<c.catchLoc)return m(c.catchLoc,!0)}else{if(!W)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return m(c.finallyLoc)}}}},abrupt:function(l,b){for(var d=this.tryEntries.length-1;d>=0;--d){var m=this.tryEntries[d];if(m.tryLoc<=this.prev&&Z.call(m,"finallyLoc")&&this.prev<m.finallyLoc){var X=m;break}}X&&("break"===l||"continue"===l)&&X.tryLoc<=b&&b<=X.finallyLoc&&(X=null);var c=X?X.completion:{};return c.type=l,c.arg=b,X?(this.method="next",this.next=X.finallyLoc,h):this.complete(c)},complete:function(l,b){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&b&&(this.next=b),h},finish:function(l){for(var b=this.tryEntries.length-1;b>=0;--b){var d=this.tryEntries[b];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),e(d),h}},catch:function(l){for(var b=this.tryEntries.length-1;b>=0;--b){var d=this.tryEntries[b];if(d.tryLoc===l){var Z=d.completion;if("throw"===Z.type){var m=Z.arg;e(d)}return m}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,Z){return this.delegate={iterator:g(l),resultName:d,nextLoc:Z},"next"===this.method&&(this.arg=b),h}},l}(l.exports);try{regeneratorRuntime=b}catch(l){"object"===("undefined"==typeof globalThis?"undefined":m(globalThis))?globalThis.regeneratorRuntime=b:Function("r","regeneratorRuntime = r")(b)}})),W="function"==typeof atob,p="function"==typeof Buffer,t="function"==typeof TextDecoder?new TextDecoder:void 0,s=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),u=(c={},s.forEach((function(l,b){return c[l]=b})),c),K=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,y=String.fromCharCode.bind(String),h="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(l){var b=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(l){return l};return new Uint8Array(Array.prototype.slice.call(l,0).map(b))},o=function(l){return l.replace(/[^A-Za-z0-9\+\/]/g,"")},n=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,I=function(l){switch(l.length){case 4:var b=((7&l.charCodeAt(0))<<18|(63&l.charCodeAt(1))<<12|(63&l.charCodeAt(2))<<6|63&l.charCodeAt(3))-65536;return y(55296+(b>>>10))+y(56320+(1023&b));case 3:return y((15&l.charCodeAt(0))<<12|(63&l.charCodeAt(1))<<6|63&l.charCodeAt(2));default:return y((31&l.charCodeAt(0))<<6|63&l.charCodeAt(1))}},L=function(l){return l.replace(n,I)},V=function(l){if(l=l.replace(/\s+/g,""),!K.test(l))throw new TypeError("malformed base64.");l+="==".slice(2-(3&l.length));for(var b,d,Z,m="",X=0;X<l.length;)b=u[l.charAt(X++)]<<18|u[l.charAt(X++)]<<12|(d=u[l.charAt(X++)])<<6|(Z=u[l.charAt(X++)]),m+=64===d?y(b>>16&255):64===Z?y(b>>16&255,b>>8&255):y(b>>16&255,b>>8&255,255&b);return m},a=W?function(l){return atob(o(l))}:p?function(l){return Buffer.from(l,"base64").toString("binary")}:V,x=p?function(l){return h(Buffer.from(l,"base64"))}:function(l){return h(a(l),(function(l){return l.charCodeAt(0)}))},Y=p?function(l){return Buffer.from(l,"base64").toString("utf8")}:t?function(l){return t.decode(x(l))}:function(l){return L(a(l))},C=function(l){return o(l.replace(/[-_]/g,(function(l){return"-"==l?"+":"/"})))},S=function(l){return Y(C(l))},H=S,e=X((function(l){var b=Object.prototype.hasOwnProperty,d="~";function Z(){}function m(l,b,d){this.fn=l,this.context=b,this.once=d||!1}function X(l,b,Z,X,c){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var G=new m(Z,X||l,c),i=d?d+b:b;return l._events[i]?l._events[i].fn?l._events[i]=[l._events[i],G]:l._events[i].push(G):(l._events[i]=G,l._eventsCount++),l}function c(l,b){0==--l._eventsCount?l._events=new Z:delete l._events[b]}function G(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(d=!1)),G.prototype.eventNames=function(){var l,Z,m=[];if(0===this._eventsCount)return m;for(Z in l=this._events)b.call(l,Z)&&m.push(d?Z.slice(1):Z);return Object.getOwnPropertySymbols?m.concat(Object.getOwnPropertySymbols(l)):m},G.prototype.listeners=function(l){var b=d?d+l:l,Z=this._events[b];if(!Z)return[];if(Z.fn)return[Z.fn];for(var m=0,X=Z.length,c=new Array(X);m<X;m++)c[m]=Z[m].fn;return c},G.prototype.listenerCount=function(l){var b=d?d+l:l,Z=this._events[b];return Z?Z.fn?1:Z.length:0},G.prototype.emit=function(l,b,Z,m,X,c){var G=d?d+l:l;if(!this._events[G])return!1;var i,W,p=this._events[G],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(l,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,b),!0;case 3:return p.fn.call(p.context,b,Z),!0;case 4:return p.fn.call(p.context,b,Z,m),!0;case 5:return p.fn.call(p.context,b,Z,m,X),!0;case 6:return p.fn.call(p.context,b,Z,m,X,c),!0}for(W=1,i=new Array(t-1);W<t;W++)i[W-1]=arguments[W];p.fn.apply(p.context,i)}else{var s,u=p.length;for(W=0;W<u;W++)switch(p[W].once&&this.removeListener(l,p[W].fn,void 0,!0),t){case 1:p[W].fn.call(p[W].context);break;case 2:p[W].fn.call(p[W].context,b);break;case 3:p[W].fn.call(p[W].context,b,Z);break;case 4:p[W].fn.call(p[W].context,b,Z,m);break;default:if(!i)for(s=1,i=new Array(t-1);s<t;s++)i[s-1]=arguments[s];p[W].fn.apply(p[W].context,i)}}return!0},G.prototype.on=function(l,b,d){return X(this,l,b,d,!1)},G.prototype.once=function(l,b,d){return X(this,l,b,d,!0)},G.prototype.removeListener=function(l,b,Z,m){var X=d?d+l:l;if(!this._events[X])return this;if(!b)return c(this,X),this;var G=this._events[X];if(G.fn)G.fn!==b||m&&!G.once||Z&&G.context!==Z||c(this,X);else{for(var i=0,W=[],p=G.length;i<p;i++)(G[i].fn!==b||m&&!G[i].once||Z&&G[i].context!==Z)&&W.push(G[i]);W.length?this._events[X]=1===W.length?W[0]:W:c(this,X)}return this},G.prototype.removeAllListeners=function(l){var b;return l?(b=d?d+l:l,this._events[b]&&c(this,b)):(this._events=new Z,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=d,G.EventEmitter=G,l.exports=G}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new e}function Z(){var l,b,d=new Promise((function(){l=arguments[0],b=arguments[1]}));return d.resolve=l,d.reject=b,d}function m(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,b=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=d.length,m=0;m<l;m++)b[m]=d[0|Math.random()*Z];return b.join("")}var X=H("");function c(){var b=l();function d(l){try{var b=new Blob([l]),d=window.URL||window.webkitURL;return new Worker(d.createObjectURL(b))}catch(l){t(l)}}var c=d(X);if(!c)return t("invalid worker"),null;function G(){c?(c.terminate(),c=void 0):t("worker has been terminated")}function i(){var l={mode:"init",type:"function",input:Array.prototype.slice.call(arguments)};c.postMessage(l)}function W(){var l=Z(),d=m(),X={mode:"call",id:d,fun:"main",input:Array.prototype.slice.call(arguments)};return c.postMessage(X),b.once(d,(function(b){"success"===b.state?l.resolve(b.msg):l.reject(b.msg)})),l}function p(l){var d=l,Z=d.mode;"emit"!==Z&&"return"!==Z||("emit"===Z&&b.emit(d.evName,d.msg),"return"===Z&&b.emit(d.id,d))}function t(l){b.emit("error",l)}return c.onmessage=function(l){p(l.data)},c.onerror=t,i(Array.prototype.slice.call(arguments)),b.main=W,b.main=W,b.terminate=G,b}G=function(){var l,Z=(l=i.mark((function l(){var d,Z,m,X=arguments;return i.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(X),Z=c(),l.next=4,Z.main.apply(Z,b(d)).finally((function(){Z.terminate()}));case 4:return m=l.sent,l.abrupt("return",m);case 6:case"end":return l.stop()}}),l)})),function(){var b=this,Z=arguments;return new Promise((function(m,X){var c=l.apply(b,Z);function G(l){d(c,m,X,G,i,"next",l)}function i(l){d(c,m,X,G,i,"throw",l)}G(void 0)}))});return function(){return Z.apply(this,arguments)}}()}(),G}()}));return"undefined"!=typeof window&&void 0!==window.document?c:X}));
