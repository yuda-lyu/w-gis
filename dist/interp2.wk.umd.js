!function(b,l){"object"==typeof exports&&"undefined"!=typeof module?module.exports=l(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],l):(b="undefined"!=typeof globalThis?globalThis:b||self).interp2=l(b.worker_threads)}(this,(function(b){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var l={};!function(l,d){l.exports=function(b){var l={};!function(b){var l=Object.prototype.hasOwnProperty,d="~";function Z(){}function m(b,l,d){this.fn=b,this.context=l,this.once=d||!1}function X(b,l,Z,X,G){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var W=new m(Z,X||b,G),c=d?d+l:l;return b._events[c]?b._events[c].fn?b._events[c]=[b._events[c],W]:b._events[c].push(W):(b._events[c]=W,b._eventsCount++),b}function G(b,l){0==--b._eventsCount?b._events=new Z:delete b._events[l]}function W(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(d=!1)),W.prototype.eventNames=function(){var b,Z,m=[];if(0===this._eventsCount)return m;for(Z in b=this._events)l.call(b,Z)&&m.push(d?Z.slice(1):Z);return Object.getOwnPropertySymbols?m.concat(Object.getOwnPropertySymbols(b)):m},W.prototype.listeners=function(b){var l=d?d+b:b,Z=this._events[l];if(!Z)return[];if(Z.fn)return[Z.fn];for(var m=0,X=Z.length,G=new Array(X);m<X;m++)G[m]=Z[m].fn;return G},W.prototype.listenerCount=function(b){var l=d?d+b:b,Z=this._events[l];return Z?Z.fn?1:Z.length:0},W.prototype.emit=function(b,l,Z,m,X,G){var W=d?d+b:b;if(!this._events[W])return!1;var c,p,K=this._events[W],s=arguments.length;if(K.fn){switch(K.once&&this.removeListener(b,K.fn,void 0,!0),s){case 1:return K.fn.call(K.context),!0;case 2:return K.fn.call(K.context,l),!0;case 3:return K.fn.call(K.context,l,Z),!0;case 4:return K.fn.call(K.context,l,Z,m),!0;case 5:return K.fn.call(K.context,l,Z,m,X),!0;case 6:return K.fn.call(K.context,l,Z,m,X,G),!0}for(p=1,c=new Array(s-1);p<s;p++)c[p-1]=arguments[p];K.fn.apply(K.context,c)}else{var i,y=K.length;for(p=0;p<y;p++)switch(K[p].once&&this.removeListener(b,K[p].fn,void 0,!0),s){case 1:K[p].fn.call(K[p].context);break;case 2:K[p].fn.call(K[p].context,l);break;case 3:K[p].fn.call(K[p].context,l,Z);break;case 4:K[p].fn.call(K[p].context,l,Z,m);break;default:if(!c)for(i=1,c=new Array(s-1);i<s;i++)c[i-1]=arguments[i];K[p].fn.apply(K[p].context,c)}}return!0},W.prototype.on=function(b,l,d){return X(this,b,l,d,!1)},W.prototype.once=function(b,l,d){return X(this,b,l,d,!0)},W.prototype.removeListener=function(b,l,Z,m){var X=d?d+b:b;if(!this._events[X])return this;if(!l)return G(this,X),this;var W=this._events[X];if(W.fn)W.fn!==l||m&&!W.once||Z&&W.context!==Z||G(this,X);else{for(var c=0,p=[],K=W.length;c<K;c++)(W[c].fn!==l||m&&!W[c].once||Z&&W[c].context!==Z)&&p.push(W[c]);p.length?this._events[X]=1===p.length?p[0]:p:G(this,X)}return this},W.prototype.removeAllListeners=function(b){var l;return b?(l=d?d+b:b,this._events[l]&&G(this,l)):(this._events=new Z,this._eventsCount=0),this},W.prototype.off=W.prototype.removeListener,W.prototype.addListener=W.prototype.on,W.prefixed=d,W.EventEmitter=W,b.exports=W}({get exports(){return l},set exports(b){l=b}});var d=l;let Z;return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let l=(m="",Buffer.from(m,"base64").toString("utf8"));var m;function X(){let Z=new d,m=function(l){try{return new b.Worker(l,{eval:!0})}catch(b){G(b)}}(l);if(!m)return G("invalid worker"),null;function X(){let b=function(){let b,l,d=new Promise((function(){b=arguments[0],l=arguments[1]}));return d.resolve=b,d.reject=l,d}(),l=function(){let b=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=d.length;for(let m=0;m<b;m++)l[m]=d[0|Math.random()*Z];return l.join("")}(),d={mode:"call",id:l,fun:"main",input:[...arguments]};return m.postMessage(d),Z.once(l,(l=>{"success"===l.state?b.resolve(l.msg):b.reject(l.msg)})),b}function G(b){Z.emit("error",b)}return m.on("message",(function(b){let l=b,d=l.mode;"emit"!==d&&"return"!==d||("emit"===d&&Z.emit(l.evName,l.msg),"return"===d&&Z.emit(l.id,l))})),m.on("error",G),function(){let b={mode:"init",type:"function",input:[...arguments]};m.postMessage(b)}([...arguments]),Z.main=X,Z.main=X,Z.terminate=function(){m?(m.terminate(),m=void 0):G("worker has been terminated")},Z}Z=async function(){let b=[...arguments],l=X();return await l.main(...b).finally((()=>{l.terminate()}))}}(),Z}(b)}({get exports(){return l},set exports(b){l=b}});var d=l,Z={};!function(b,l){b.exports=function(){const b="function"==typeof Buffer,l="function"==typeof TextDecoder?new TextDecoder:void 0,d=(b=>{let l={};return b.forEach(((b,d)=>l[b]=d)),l})(("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="))),Z=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,m=String.fromCharCode.bind(String),X="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):b=>new Uint8Array(Array.prototype.slice.call(b,0)),G=b=>b.replace(/[^A-Za-z0-9\+\/]/g,""),W=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,c=b=>{switch(b.length){case 4:var l=((7&b.charCodeAt(0))<<18|(63&b.charCodeAt(1))<<12|(63&b.charCodeAt(2))<<6|63&b.charCodeAt(3))-65536;return m(55296+(l>>>10))+m(56320+(1023&l));case 3:return m((15&b.charCodeAt(0))<<12|(63&b.charCodeAt(1))<<6|63&b.charCodeAt(2));default:return m((31&b.charCodeAt(0))<<6|63&b.charCodeAt(1))}},p=b=>b.replace(W,c),K=b=>{if(b=b.replace(/\s+/g,""),!Z.test(b))throw new TypeError("malformed base64.");b+="==".slice(2-(3&b.length));let l,X,G,W="";for(let Z=0;Z<b.length;)l=d[b.charAt(Z++)]<<18|d[b.charAt(Z++)]<<12|(X=d[b.charAt(Z++)])<<6|(G=d[b.charAt(Z++)]),W+=64===X?m(l>>16&255):64===G?m(l>>16&255,l>>8&255):m(l>>16&255,l>>8&255,255&l);return W},s="function"==typeof atob?b=>atob(G(b)):b?b=>Buffer.from(b,"base64").toString("binary"):K,i=b?b=>X(Buffer.from(b,"base64")):b=>X(s(b).split("").map((b=>b.charCodeAt(0)))),y=b?b=>Buffer.from(b,"base64").toString("utf8"):l?b=>l.decode(i(b)):b=>p(s(b)),u=b=>G(b.replace(/[-_]/g,(b=>"-"==b?"+":"/"))),I=b=>y(u(b)),L=I;var h={};!function(b){var l=Object.prototype.hasOwnProperty,d="~";function Z(){}function m(b,l,d){this.fn=b,this.context=l,this.once=d||!1}function X(b,l,Z,X,G){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var W=new m(Z,X||b,G),c=d?d+l:l;return b._events[c]?b._events[c].fn?b._events[c]=[b._events[c],W]:b._events[c].push(W):(b._events[c]=W,b._eventsCount++),b}function G(b,l){0==--b._eventsCount?b._events=new Z:delete b._events[l]}function W(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(d=!1)),W.prototype.eventNames=function(){var b,Z,m=[];if(0===this._eventsCount)return m;for(Z in b=this._events)l.call(b,Z)&&m.push(d?Z.slice(1):Z);return Object.getOwnPropertySymbols?m.concat(Object.getOwnPropertySymbols(b)):m},W.prototype.listeners=function(b){var l=d?d+b:b,Z=this._events[l];if(!Z)return[];if(Z.fn)return[Z.fn];for(var m=0,X=Z.length,G=new Array(X);m<X;m++)G[m]=Z[m].fn;return G},W.prototype.listenerCount=function(b){var l=d?d+b:b,Z=this._events[l];return Z?Z.fn?1:Z.length:0},W.prototype.emit=function(b,l,Z,m,X,G){var W=d?d+b:b;if(!this._events[W])return!1;var c,p,K=this._events[W],s=arguments.length;if(K.fn){switch(K.once&&this.removeListener(b,K.fn,void 0,!0),s){case 1:return K.fn.call(K.context),!0;case 2:return K.fn.call(K.context,l),!0;case 3:return K.fn.call(K.context,l,Z),!0;case 4:return K.fn.call(K.context,l,Z,m),!0;case 5:return K.fn.call(K.context,l,Z,m,X),!0;case 6:return K.fn.call(K.context,l,Z,m,X,G),!0}for(p=1,c=new Array(s-1);p<s;p++)c[p-1]=arguments[p];K.fn.apply(K.context,c)}else{var i,y=K.length;for(p=0;p<y;p++)switch(K[p].once&&this.removeListener(b,K[p].fn,void 0,!0),s){case 1:K[p].fn.call(K[p].context);break;case 2:K[p].fn.call(K[p].context,l);break;case 3:K[p].fn.call(K[p].context,l,Z);break;case 4:K[p].fn.call(K[p].context,l,Z,m);break;default:if(!c)for(i=1,c=new Array(s-1);i<s;i++)c[i-1]=arguments[i];K[p].fn.apply(K[p].context,c)}}return!0},W.prototype.on=function(b,l,d){return X(this,b,l,d,!1)},W.prototype.once=function(b,l,d){return X(this,b,l,d,!0)},W.prototype.removeListener=function(b,l,Z,m){var X=d?d+b:b;if(!this._events[X])return this;if(!l)return G(this,X),this;var W=this._events[X];if(W.fn)W.fn!==l||m&&!W.once||Z&&W.context!==Z||G(this,X);else{for(var c=0,p=[],K=W.length;c<K;c++)(W[c].fn!==l||m&&!W[c].once||Z&&W[c].context!==Z)&&p.push(W[c]);p.length?this._events[X]=1===p.length?p[0]:p:G(this,X)}return this},W.prototype.removeAllListeners=function(b){var l;return b?(l=d?d+b:b,this._events[l]&&G(this,l)):(this._events=new Z,this._eventsCount=0),this},W.prototype.off=W.prototype.removeListener,W.prototype.addListener=W.prototype.on,W.prefixed=d,W.EventEmitter=W,b.exports=W}({get exports(){return h},set exports(b){h=b}});var V=h;let x;return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let b=L("");function l(){let l=new V,d=function(b){try{let l=new Blob([b]),d=window.URL||window.webkitURL;return new Worker(d.createObjectURL(l))}catch(b){m(b)}}(b);if(!d)return m("invalid worker"),null;function Z(){let b=function(){let b,l,d=new Promise((function(){b=arguments[0],l=arguments[1]}));return d.resolve=b,d.reject=l,d}(),Z=function(){let b=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=d.length;for(let m=0;m<b;m++)l[m]=d[0|Math.random()*Z];return l.join("")}(),m={mode:"call",id:Z,fun:"main",input:[...arguments]};return d.postMessage(m),l.once(Z,(l=>{"success"===l.state?b.resolve(l.msg):b.reject(l.msg)})),b}function m(b){l.emit("error",b)}return d.onmessage=function(b){!function(b){let d=b,Z=d.mode;"emit"!==Z&&"return"!==Z||("emit"===Z&&l.emit(d.evName,d.msg),"return"===Z&&l.emit(d.id,d))}(b.data)},d.onerror=m,function(){let b={mode:"init",type:"function",input:[...arguments]};d.postMessage(b)}([...arguments]),l.main=Z,l.main=Z,l.terminate=function(){d?(d.terminate(),d=void 0):m("worker has been terminated")},l}x=async function(){let b=[...arguments],d=l();return await d.main(...b).finally((()=>{d.terminate()}))}}(),x}()}({get exports(){return Z},set exports(b){Z=b}});var m=Z;let X;return X="undefined"!=typeof window&&void 0!==window.document?m:d,X}));
